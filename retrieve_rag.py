# -*- coding: utf-8 -*-
"""retrieve_rag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QEeVyzqfM3oMAy-tP3co85RIp8i_aDje
"""

# !pip install faiss-cpu sentence_transformers

# import numpy as np
# import faiss
# from sentence_transformers import SentenceTransformer
# import sqlite3

# embedder = SentenceTransformer("pritamdeka/S-PubMedBert-MS-MARCO")

# index = faiss.read_index("medical_faiss.index")
# with open("faiss_ids.txt") as f:
#     id_list = [line.strip() for line in f]

# conn = sqlite3.connect("medical.db")
# cur = conn.cursor()

# retriever.py

import faiss
import sqlite3
import json
from sentence_transformers import SentenceTransformer

import numpy as np

embedder = SentenceTransformer("pritamdeka/S-PubMedBert-MS-MARCO")

index = faiss.read_index("medical_faiss.index")
with open("faiss_ids.txt") as f:
    id_list = [line.strip() for line in f]

# SQLite WHO DB
conn = sqlite3.connect("medical01.db")

# def retrieve(query: str, top_k: int = 5, min_confidence: float = 0.8):
#     # 1Ô∏è‚É£ Embed the query
#     vec = embedder.encode([query]).astype("float32")
#     distances, indices = index.search(vec, top_k)

#     results = []
#     for dist, idx in zip(distances[0], indices[0]):
#         if idx < 0:
#             continue  # skip invalid hits
#         doc_id = id_list[idx]

#         row = conn.execute(
#             "SELECT id, condition, source, content FROM facts WHERE id = ?",
#             (doc_id,)
#         ).fetchone()
#         if not row:
#             continue

#         # 2Ô∏è‚É£ Convert FAISS distance to cosine similarity
#         similarity = 1 - dist  # because you likely indexed with cosine distance
#         if similarity < min_confidence:
#             continue  # skip weak matches

#         results.append({
#             "id": row[0],
#             "condition": row[1],
#             "source": row[2],
#             "content": row[3],
#             "confidence": round(similarity, 4)
#         })

#     return results

def retrieve(query: str, top_k: int = 5, min_confidence: float = 0.8):
    print(f"\nüîç Received query: {query}")

    # Embed the query
    vec = embedder.encode([query]).astype("float32")
    vec = vec / np.linalg.norm(vec)
    print(f"‚úÖ Embedded query shape: {vec.shape}")

    # Search FAISS index
    distances, indices = index.search(vec, top_k)
    print(f"üß© Distances: {distances}")
    print(f"üß© Indices: {indices}")

    results = []
    # for dist, idx in zip(distances[0], indices[0]):
    #     if idx < 0:
    #         print("‚è≠Ô∏è Skipping invalid index")
    #         continue

    #     doc_id = id_list[idx]
    #     print(f"‚û°Ô∏è Checking ID: {doc_id}")

    #     # Lookup in DB
    #     row = conn.execute(
    #         "SELECT id, condition, source, content FROM facts WHERE id = ?",
    #         (doc_id,)
    #     ).fetchone()

    #     if not row:
    #         print(f"‚è≠Ô∏è No row found for ID {doc_id}")
    #         continue

    #     # Convert distance to similarity
    #     similarity = 1 - dist
    #     print(f"üîó Similarity: {similarity:.4f}")

    #     if similarity < min_confidence:
    #         print(f"‚è≠Ô∏è Below threshold: {similarity:.4f} < {min_confidence}")
    #         continue

    #     result = {
    #         "id": row[0],
    #         "condition": row[1],
    #         "source": row[2],
    #         "content": row[3],
    #         "confidence": round(similarity, 4)
    #     }
    #     print(f"‚úÖ Adding: {result['condition']} (confidence {result['confidence']})")
    #     results.append(result)

    # print(f"‚úÖ Total matches: {len(results)}\n")
    # return results
    for dist, idx in zip(distances[0], indices[0]):
      if idx < 0:
        continue

      doc_id = id_list[idx]  # e.g. malaria||factsheet
      print(f"‚û°Ô∏è Checking ID: {doc_id}")

      disease_id, source = doc_id.split("||")

    # Pick the table based on the source
      table = "factsheets" if source == "factsheet" else "who_brief"

      row = conn.execute(
          f"SELECT id, condition, content FROM {table} WHERE id = ?",
          (disease_id,)
      ).fetchone()

      if not row:
          print(f"‚è≠Ô∏è No row found for ID {disease_id} in {table}")
          continue

      similarity =  dist
      if similarity < min_confidence:
          continue

      result = {
          "id": row[0],
          "condition": row[1],
          "source": source,
          "content": row[2],
          "confidence": round(similarity, 4)
      }
      results.append(result)

    print(f"‚úÖ Total matches: {len(results)}\n")
    return results

query = "I have mild fever, cough and cold"
results = retrieve(query, top_k=5, min_confidence=0.5)

print("\n=== FINAL RESULTS ===")
for r in results:
    print(f"Condition: {r['condition']}")
    print(f"Confidence: {r['confidence']}")
    print(f"Content: {r['content'][:200]}...")  # first 200 chars only
    print("---")